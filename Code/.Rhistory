knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
dvdc <- raster::brick('../Assets/data-viz-dc.png')
#fourth layer is typically alpha or transparency
dvdc
amurika <- raster::brick('../Assets/american-flag-2260839_960_720.jpg')
raster::plotRGB(amurika)
dc <- raster::brick('../Assets/m_3807708_se_18_1_20160718_20160928.jp2')
dc
png('../Assets/almost_white_house.png', dim(wh)[2], dim(wh)[1])
marked_wh <- raster::brick('../Assets/almost_white_house_marked.png')
marked_bool <- marked_wh[[1]] == 163 & marked_wh[[2]] == 73 & marked_wh[[3]] == 164
marked_bool[marked_bool == 0] <- NA
raster::extent(marked_bool) <- raster::extent(wh)
crashes <- sf::read_sf('../Assets/Crashes_in_DC/Crashes_in_DC.shp')
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
h2015 <- lidR::readLAS('../Assets/h2015_wide.las')
h2018 <- lidR::readLAS('../Assets/h2018_wide.las')
?lidR
?lidR::`lidR-package`
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
h2015 <- lidR::readLAS('../Assets/Lidar_Data/h2015_wide.las')
?lidR::grid_metrics3d
f <- function(i) { list(Intensity = mean(i))}
small_lidar <- lidR::grid_metrics3d(h2015, ~f(Intensity), .5)
small_lidar
?lidR::lidR
write_csv('../Assets/Lidar_Data/h2015_wide_small.xyz')
readr::write_csv(small_lidar, '../Assets/Lidar_Data/h2015_wide_small.xyz')
lidR::readLAS('../Assets/Lidar_Data/h2015_wide_small.xyz')
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
intro_mat <- matrix(1:25, ncol = 5)
intro_mat
intro_rast <- raster::raster(intro_mat)
intro_rast
raster::plot(intro_rast)
intro_mat_bool <- rbind(
c(F,F,T,F,F),
c(T,T,T,T,T),
c(F,F,T,F,F),
c(F,F,T,F,F)
)
intro_mat_bool
intro_rast_bool <- raster::raster(intro_mat_bool)
intro_rast_bool
raster::plot(intro_rast_bool)
intro_bool_remove = intro_rast
intro_bool_remove[intro_rast_bool] <- NA
raster::as.matrix(intro_bool_remove)
raster::plot(intro_bool_remove)
intro_rast_query <- intro_rast
intro_rast_query[intro_rast_query %% 2] <- NA
raster::plot(intro_rast_query)
v <- raster::raster(volcano)
raster::plot(v)
gray.colors(10)
raster::plot(v, col = gray.colors(10))
x <- raster::rasterToContour(v, nlevels = 20) %>%
sf::st_as_sf()
plot(x)
x %>%
dplyr::mutate(level = level %>% as.character() %>% as.numeric()) %>%
dplyr::filter(level >= 130) %>%
dplyr::mutate(geometry = sf::st_cast(geometry, 'MULTIPOLYGON'),
inundated = level <= 150) %>%
dplyr::select(inundated) %>%
plot(pal = c('green', 'blue'))
library(rayshader)
# t - transpose - is necessary to convert the matrix to a layout that rayshader likes
volcanoshadow = sphere_shade(t(volcano))
rayshader::plot_map(volcanoshadow)
rayshader::plot_3d(hillshade = volcanoshadow, heightmap = t(volcano))
rayshader::render_snapshot()
# rgb values can be stored as an umber from 0 to 255
set.seed(4321)
intro_arr <- round(array(runif(75, 1, 255), c(5,5,3)))
intro_arr
intro_brick <- raster::brick(intro_arr)
names(intro_brick) <- c('red', 'green', 'blue')
intro_brick
raster::plotRGB(intro_brick, r = 1, g = 2, b = 3)
intro_brick_bool <- intro_brick[[1]] %% 2 & intro_brick[[2]] %% 2 & intro_brick[[3]] %% 2
raster::plot(intro_brick_bool)
intro_brick_query <- intro_brick
intro_brick_query[intro_brick_bool] <- NA
raster::plotRGB(intro_brick_query)
dvdc <- raster::brick('../Assets/data-viz-dc.png')
#fourth layer is typically alpha or transparency
dvdc
raster::plotRGB(dvdc, 1, 2, 3)
dvdc_smallAgg <- raster::aggregate(dvdc, fact = 9, fun = mean)
raster::plotRGB(dvdc_smallAgg)
dvdc_largeAgg <- raster::aggregate(dvdc, 45, mean)
raster::plotRGB(dvdc_largeAgg)
### should be 0, but some grays in images so we'll do less than 50
dvdc_black <- dvdc[[1]] <= 50 & dvdc[[2]] <= 50 & dvdc[[3]] <= 50
dvdc_black
raster::plot(dvdc_black)
#should be 255, but some grays so >= 240
dvdc_white <- dvdc[[1]] >= 240 & dvdc[[2]] >= 240 & dvdc[[3]] >= 240
dvdc_white
raster::plot(dvdc_white)
dvdc_cover <- dvdc
dvdc_cover[dvdc_black] <- NA
raster::plotRGB(dvdc_cover, colNA = 'purple')
amurika <- raster::brick('../Assets/american-flag-2260839_960_720.jpg')
raster::plotRGB(amurika)
raster::extent(dvdc_cover)
raster::extent(amurika)
dim(dvdc_cover)
dim(amurika)
raster::res(dvdc_cover)
raster::res(amurika)
# add an alpha layer to flag
amurika[[4]] <- 255
small_amurika <- raster::crop(amurika, dvdc_cover)
small_amurika <- raster::extend(small_amurika, dvdc_cover)
raster::plotRGB(small_amurika, colNA = 'purple')
dvdc_amurika <- raster::cover(dvdc_cover, small_amurika)
raster::plotRGB(dvdc_amurika)
long_amurika <- amurika
raster::extent(long_amurika) <- raster::extent(dvdc_cover)
raster::plotRGB(long_amurika)
raster::res(long_amurika)
long_amurika_res <- raster::resample(long_amurika, dvdc_cover, 'ngb')
raster::res(long_amurika_res)
raster::plotRGB(long_amurika_res)
dvdc_amurika2 <- raster::cover(dvdc_cover, long_amurika_res)
raster::plotRGB(dvdc_amurika2)
dc <- raster::brick('../Assets/m_3807708_se_18_1_20160718_20160928.jp2')
dc
raster::plotRGB(dc)
# c(38.8998515, -77.0318053)
wh_extent <- rbind(c(-77.03, 38.894383),
c(-77.03969, 38.90232)) %>%
sp::SpatialPoints(proj4string = sp::CRS("+init=epsg:4326")) %>%
sp::spTransform(sf::st_crs(dc)$proj4string) %>%
raster::extent()
wh_extent
wh <- raster::crop(dc, wh_extent)
raster::plotRGB(wh)
png('../Assets/almost_white_house.png', dim(wh)[2], dim(wh)[1])
raster::plotRGB(wh)
dev.off()
marked_wh <- raster::brick('../Assets/almost_white_house_marked.png')
marked_bool <- marked_wh[[1]] == 163 & marked_wh[[2]] == 73 & marked_wh[[3]] == 164
marked_bool[marked_bool == 0] <- NA
raster::extent(marked_bool) <- raster::extent(wh)
masked_wh <- raster::mask(wh, marked_bool)
raster::plotRGB(masked_wh)
wh_bbox <- !is.na(masked_wh)
wh_bbox[!wh_bbox] <- NA
wh_bbox <- wh_bbox[[1]] %>%
raster::rasterToPolygons() %>%
raster::extent()
wh_zoom <- raster::crop(wh, wh_bbox)
raster::plotRGB(wh_zoom)
crashes <- sf::read_sf('../Assets/Crashes_in_DC/crashes_reduced.gpkg')
wh_area <- wh %>%
sf::st_bbox() %>%
sf::st_as_sfc() %>%
sf::st_as_sf()
wh_crashes <- crashes %>%
sf::st_transform(sf::st_crs(wh_area)) %>%
dplyr::filter(sf::st_intersects(., wh_area, F))
wh_gray <- wh[[1]] + wh[[2]] + wh[[3]]
raster::plot(wh_gray, col = gray.colors(100))
plot(wh_crashes$geometry, add = T, pch = 21, bg = 'red', cex =.5)
wh_gray <- wh[[1]] + wh[[2]] + wh[[3]]
raster::plot(wh_gray, col = gray.colors(100))
plot(wh_crashes$geom, add = T, pch = 21, bg = 'red', cex =.5)
crash <- raster::rasterize(wh_crashes, wh, field = 1, fun = function(x,...) length(x))
raster::plot(crash, col = rev(heat.colors(50)))
crash_agg <- raster::aggregate(crash, 20)
raster::plot(crash_agg, col = rev(heat.colors(50)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.95,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.95,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
crash_shape <- crash_agg %>%
raster::rasterToPolygons() %>%
sf::st_as_sf()
raster::plot(wh_gray, col = gray.colors(100), legend = F)
plot(crash_shape, add = T)
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.8,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.5,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.25,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
crash_agg <- raster::aggregate(crash, 20)
raster::plot(crash_agg, col = rev(heat.colors(50)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.5,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
crash_agg <- raster::aggregate(crash, 20)
raster::plot(crash_agg, col = rev(heat.colors(50)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.75,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
crash_agg <- raster::aggregate(crash, 20)
raster::plot(crash_agg, col = rev(heat.colors(50)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.85,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
crash_agg <- raster::aggregate(crash, 20)
raster::plot(crash_agg, col = rev(heat.colors(50)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.9,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
crash_agg <- raster::aggregate(crash, 20)
raster::plot(crash_agg, col = rev(heat.colors(50)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.95,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
crash_shape <- crash_agg %>%
raster::rasterToPolygons() %>%
sf::st_as_sf()
raster::plot(wh_gray, col = gray.colors(100), legend = F)
plot(crash_shape, add = T)
highest_crash_area <- crash_shape %>%
dplyr::arrange(desc(layer)) %>%
head(1)
crashes_in_area <- wh_crashes %>%
dplyr::filter(sf::st_intersects(., highest_crash_area, F))
head(crashes_in_area)
wh_crop <- raster::crop(wh_gray, raster::extent(highest_crash_area))
raster::plot(wh_crop, col = gray.colors(50), legend =F)
plot(crashes_in_area$geometry, add = T, pch = 21, bg = 'red', alpha = .1)
wh_crop <- raster::crop(wh_gray, raster::extent(highest_crash_area))
raster::plot(wh_crop, col = gray.colors(50), legend =F)
plot(crashes_in_area$geom, add = T, pch = 21, bg = 'red', alpha = .1)
?raster::aggregate
crash_agg <- raster::aggregate(crash, 20, fun = sum)
raster::plot(crash_agg, col = rev(heat.colors(50)))
danger_zone <- crash_agg >= quantile(raster::values(crash_agg),
.95,
na.rm = T)
crash_agg[!danger_zone] <- NA
raster::plot(wh_gray, col = gray.colors(100), legend = F)
raster::plot(crash_agg, add = T, col = rev(heat.colors(5)))
crash_shape <- crash_agg %>%
raster::rasterToPolygons() %>%
sf::st_as_sf()
raster::plot(wh_gray, col = gray.colors(100), legend = F)
plot(crash_shape, add = T)
highest_crash_area <- crash_shape %>%
dplyr::arrange(desc(layer)) %>%
head(1)
crashes_in_area <- wh_crashes %>%
dplyr::filter(sf::st_intersects(., highest_crash_area, F))
head(crashes_in_area)
highest_crash_area <- crash_shape %>%
dplyr::arrange(desc(layer)) %>%
head(1)
crashes_in_area <- wh_crashes %>%
dplyr::filter(sf::st_intersects(., highest_crash_area, F))
crashes_in_area
wh_crop <- raster::crop(wh_gray, raster::extent(highest_crash_area))
raster::plot(wh_crop, col = gray.colors(50), legend =F)
plot(crashes_in_area$geom, add = T, pch = 21, bg = 'red', alpha = .1)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
h2015 <- lidR::readLAS('../Assets/Lidar_Data/h2015_wide_sample.las')
h2018 <- lidR::readLAS('../Assets/Lidar_Data/h2018_wide.las')
